I'll create a comprehensive Laravel migration file for your project and collaboration management system. This will be a single migration file with all the tables and relationships needed for a production-ready system.

```php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        // Core User Management Tables
        Schema::create('users', function (Blueprint $table) {
            $table->id();
            $table->string('name');
            $table->string('email')->unique();
            $table->timestamp('email_verified_at')->nullable();
            $table->string('password');
            $table->string('avatar')->nullable();
            $table->string('phone')->nullable();
            $table->string('timezone')->default('UTC');
            $table->string('locale')->default('en');
            $table->boolean('is_active')->default(true);
            $table->timestamp('last_login_at')->nullable();
            $table->json('metadata')->nullable();
            $table->rememberToken();
            $table->timestamps();

            $table->index(['email', 'is_active']);
            $table->index('last_login_at');
        });

        Schema::create('workspaces', function (Blueprint $table) {
            $table->id();
            $table->string('name');
            $table->string('slug')->unique();
            $table->text('description')->nullable();
            $table->string('logo')->nullable();
            $table->string('domain')->nullable();
            $table->json('settings')->nullable();
            $table->boolean('is_active')->default(true);
            $table->timestamps();
            
            $table->index(['slug', 'is_active']);
        });

        Schema::create('teams', function (Blueprint $table) {
            $table->id();
            $table->foreignId('workspace_id')->constrained()->cascadeOnDelete();
            $table->string('name');
            $table->string('slug');
            $table->text('description')->nullable();
            $table->string('color')->default('#3B82F6');
            $table->boolean('is_active')->default(true);
            $table->timestamps();
            
            $table->unique(['workspace_id', 'slug']);
            $table->index(['workspace_id', 'is_active']);
        });

        Schema::create('team_user', function (Blueprint $table) {
            $table->id();
            $table->foreignId('team_id')->constrained()->cascadeOnDelete();
            $table->foreignId('user_id')->constrained()->cascadeOnDelete();
            $table->enum('role', ['owner', 'admin', 'member', 'viewer'])->default('member');
            $table->timestamp('joined_at')->useCurrent();
            $table->timestamps();
            
            $table->unique(['team_id', 'user_id']);
            $table->index(['user_id', 'role']);
        });

        Schema::create('workspace_user', function (Blueprint $table) {
            $table->id();
            $table->foreignId('workspace_id')->constrained()->cascadeOnDelete();
            $table->foreignId('user_id')->constrained()->cascadeOnDelete();
            $table->enum('role', ['owner', 'admin', 'member', 'viewer'])->default('member');
            $table->timestamp('joined_at')->useCurrent();
            $table->timestamps();
            
            $table->unique(['workspace_id', 'user_id']);
            $table->index(['user_id', 'role']);
        });

        // Project Management Tables
        Schema::create('projects', function (Blueprint $table) {
            $table->id();
            $table->foreignId('workspace_id')->constrained()->cascadeOnDelete();
            $table->foreignId('team_id')->nullable()->constrained()->nullOnDelete();
            $table->foreignId('owner_id')->constrained('users')->cascadeOnDelete();
            $table->string('name');
            $table->string('slug');
            $table->text('description')->nullable();
            $table->string('color')->default('#10B981');
            $table->enum('status', ['draft', 'active', 'on_hold', 'completed', 'cancelled'])->default('draft');
            $table->enum('priority', ['low', 'medium', 'high', 'urgent'])->default('medium');
            $table->date('start_date')->nullable();
            $table->date('end_date')->nullable();
            $table->decimal('budget', 15, 2)->nullable();
            $table->integer('progress')->default(0);
            $table->boolean('is_template')->default(false);
            $table->json('metadata')->nullable();
            $table->timestamps();
            
            $table->unique(['workspace_id', 'slug']);
            $table->index(['workspace_id', 'status']);
            $table->index(['team_id', 'status']);
            $table->index(['owner_id', 'status']);
        });

        Schema::create('project_user', function (Blueprint $table) {
            $table->id();
            $table->foreignId('project_id')->constrained()->cascadeOnDelete();
            $table->foreignId('user_id')->constrained()->cascadeOnDelete();
            $table->enum('role', ['owner', 'manager', 'contributor', 'viewer'])->default('contributor');
            $table->timestamps();
            
            $table->unique(['project_id', 'user_id']);
            $table->index(['user_id', 'role']);
        });

        Schema::create('statuses', function (Blueprint $table) {
            $table->id();
            $table->foreignId('workspace_id')->constrained()->cascadeOnDelete();
            $table->string('name');
            $table->string('slug');
            $table->string('color')->default('#6B7280');
            $table->string('icon')->nullable();
            $table->integer('order')->default(0);
            $table->enum('type', ['backlog', 'todo', 'in_progress', 'done', 'cancelled'])->default('todo');
            $table->boolean('is_default')->default(false);
            $table->timestamps();
            
            $table->unique(['workspace_id', 'slug']);
            $table->index(['workspace_id', 'type']);
        });

        Schema::create('pipelines', function (Blueprint $table) {
            $table->id();
            $table->foreignId('workspace_id')->constrained()->cascadeOnDelete();
            $table->foreignId('project_id')->nullable()->constrained()->nullOnDelete();
            $table->string('name');
            $table->string('slug');
            $table->text('description')->nullable();
            $table->boolean('is_default')->default(false);
            $table->timestamps();
            
            $table->unique(['workspace_id', 'slug']);
            $table->index(['workspace_id', 'project_id']);
        });

        Schema::create('pipeline_status', function (Blueprint $table) {
            $table->id();
            $table->foreignId('pipeline_id')->constrained()->cascadeOnDelete();
            $table->foreignId('status_id')->constrained()->cascadeOnDelete();
            $table->integer('order')->default(0);
            $table->timestamps();
            
            $table->unique(['pipeline_id', 'status_id']);
            $table->index(['pipeline_id', 'order']);
        });


        // Task Management Tables
        Schema::create('tasks', function (Blueprint $table) {
            $table->id();
            $table->foreignId('workspace_id')->constrained()->cascadeOnDelete();
            $table->foreignId('project_id')->constrained()->cascadeOnDelete();
            $table->foreignId('status_id')->constrained()->cascadeOnDelete();
            $table->foreignId('assignee_id')->nullable()->constrained('users')->nullOnDelete();
            $table->foreignId('reporter_id')->constrained('users')->cascadeOnDelete();
            $table->foreignId('parent_id')->nullable()->constrained('tasks')->nullOnDelete();
            $table->string('title');
            $table->text('description')->nullable();
            $table->enum('priority', ['low', 'medium', 'high', 'urgent'])->default('medium');
            $table->enum('type', ['task', 'bug', 'feature', 'story', 'epic'])->default('task');
            $table->datetime('due_date')->nullable();
            $table->datetime('start_date')->nullable();
            $table->integer('estimated_hours')->nullable();
            $table->integer('actual_hours')->nullable();
            $table->integer('story_points')->nullable();
            $table->integer('order')->default(0);
            $table->boolean('is_recurring')->default(false);
            $table->json('metadata')->nullable();
            $table->timestamps();
            
            $table->index(['workspace_id', 'status_id']);
            $table->index(['project_id', 'status_id']);
            $table->index(['assignee_id', 'status_id']);
            $table->index(['reporter_id', 'created_at']);
            $table->index(['due_date', 'status_id']);
            $table->index(['parent_id', 'order']);
        });

        Schema::create('task_pipeline', function (Blueprint $table) {
            $table->id();
            $table->foreignId('task_id')->constrained()->cascadeOnDelete();
            $table->foreignId('pipeline_id')->constrained()->cascadeOnDelete();
            $table->foreignId('status_id')->constrained()->cascadeOnDelete();
            $table->integer('order')->default(0);
            $table->timestamps();
            
            $table->unique(['task_id', 'pipeline_id']);
            $table->index(['pipeline_id', 'status_id', 'order']);
        });

        Schema::create('subtasks', function (Blueprint $table) {
            $table->id();
            $table->foreignId('task_id')->constrained()->cascadeOnDelete();
            $table->string('title');
            $table->text('description')->nullable();
            $table->boolean('is_completed')->default(false);
            $table->integer('order')->default(0);
            $table->timestamps();
            
            $table->index(['task_id', 'order']);
            $table->index(['task_id', 'is_completed']);
        });

        Schema::create('task_dependencies', function (Blueprint $table) {
            $table->id();
            $table->foreignId('task_id')->constrained()->cascadeOnDelete();
            $table->foreignId('depends_on_id')->constrained('tasks')->cascadeOnDelete();
            $table->enum('type', ['blocks', 'relates_to', 'duplicates'])->default('blocks');
            $table->timestamps();
            
            $table->unique(['task_id', 'depends_on_id']);
            $table->index(['depends_on_id', 'type']);
        });

        Schema::create('milestones', function (Blueprint $table) {
            $table->id();
            $table->foreignId('project_id')->constrained()->cascadeOnDelete();
            $table->string('name');
            $table->text('description')->nullable();
            $table->date('due_date')->nullable();
            $table->boolean('is_completed')->default(false);
            $table->integer('order')->default(0);
            $table->timestamps();
            
            $table->index(['project_id', 'due_date']);
            $table->index(['project_id', 'is_completed']);
        });

        Schema::create('task_milestone', function (Blueprint $table) {
            $table->id();
            $table->foreignId('task_id')->constrained()->cascadeOnDelete();
            $table->foreignId('milestone_id')->constrained()->cascadeOnDelete();
            $table->timestamps();
            
            $table->unique(['task_id', 'milestone_id']);
        });
        
        


        // Tagging System
        Schema::create('tags', function (Blueprint $table) {
            $table->id();
            $table->foreignId('workspace_id')->constrained()->cascadeOnDelete();
            $table->string('name');
            $table->string('slug');
            $table->string('color')->default('#8B5CF6');
            $table->text('description')->nullable();
            $table->timestamps();
            
            $table->unique(['workspace_id', 'slug']);
            $table->index(['workspace_id', 'name']);
        });

        Schema::create('task_tag', function (Blueprint $table) {
            $table->id();
            $table->foreignId('task_id')->constrained()->cascadeOnDelete();
            $table->foreignId('tag_id')->constrained()->cascadeOnDelete();
            $table->timestamps();
            
            $table->unique(['task_id', 'tag_id']);
        });


        // Communication Tables
        Schema::create('comments', function (Blueprint $table) {
            $table->id();
            $table->foreignId('user_id')->constrained()->cascadeOnDelete();
            $table->morphs('commentable');
            $table->foreignId('parent_id')->nullable()->constrained('comments')->nullOnDelete();
            $table->text('content');
            $table->boolean('is_internal')->default(false);
            $table->boolean('is_edited')->default(false);
            $table->timestamp('edited_at')->nullable();
            $table->timestamps();
            
            $table->index(['commentable_type', 'commentable_id']);
            $table->index(['user_id', 'created_at']);
            $table->index(['parent_id', 'created_at']);
        });

        Schema::create('conversations', function (Blueprint $table) {
            $table->id();
            $table->foreignId('workspace_id')->constrained()->cascadeOnDelete();
            $table->string('name')->nullable();
            $table->enum('type', ['direct', 'group', 'channel'])->default('direct');
            $table->boolean('is_private')->default(true);
            $table->timestamps();
            
            $table->index(['workspace_id', 'type']);
        });

        Schema::create('conversation_user', function (Blueprint $table) {
            $table->id();
            $table->foreignId('conversation_id')->constrained()->cascadeOnDelete();
            $table->foreignId('user_id')->constrained()->cascadeOnDelete();
            $table->enum('role', ['owner', 'admin', 'member'])->default('member');
            $table->timestamp('joined_at')->useCurrent();
            $table->timestamp('last_read_at')->nullable();
            $table->timestamps();
            
            $table->unique(['conversation_id', 'user_id']);
            $table->index(['user_id', 'last_read_at']);
        });

        Schema::create('messages', function (Blueprint $table) {
            $table->id();
            $table->foreignId('conversation_id')->constrained()->cascadeOnDelete();
            $table->foreignId('user_id')->constrained()->cascadeOnDelete();
            $table->text('content');
            $table->enum('type', ['text', 'file', 'image', 'system'])->default('text');
            $table->json('metadata')->nullable();
            $table->boolean('is_edited')->default(false);
            $table->timestamp('edited_at')->nullable();
            $table->timestamps();
            
            $table->index(['conversation_id', 'created_at']);
            $table->index(['user_id', 'created_at']);
        });

        Schema::create('mentions', function (Blueprint $table) {
            $table->id();
            $table->foreignId('user_id')->constrained()->cascadeOnDelete();
            $table->morphs('mentionable');
            $table->foreignId('mentioned_by_id')->constrained('users')->cascadeOnDelete();
            $table->boolean('is_read')->default(false);
            $table->timestamps();
            
            $table->unique(['user_id', 'mentionable_type', 'mentionable_id']);
            $table->index(['user_id', 'is_read']);
        });

        // File Management
        Schema::create('attachments', function (Blueprint $table) {
            $table->id();
            $table->foreignId('user_id')->constrained()->cascadeOnDelete();
            $table->morphs('attachable');
            $table->string('name');
            $table->string('original_name');
            $table->string('path');
            $table->string('disk')->default('public');
            $table->string('mime_type');
            $table->bigInteger('size');
            $table->json('metadata')->nullable();
            $table->timestamps();
            
            $table->index(['attachable_type', 'attachable_id']);
            $table->index(['user_id', 'created_at']);
        });

        Schema::create('media', function (Blueprint $table) {
            $table->id();
            $table->foreignId('workspace_id')->constrained()->cascadeOnDelete();
            $table->foreignId('user_id')->constrained()->cascadeOnDelete();
            $table->string('name');
            $table->string('original_name');
            $table->string('path');
            $table->string('disk')->default('public');
            $table->string('mime_type');
            $table->bigInteger('size');
            $table->string('collection')->nullable();
            $table->json('metadata')->nullable();
            $table->timestamps();
            
            $table->index(['workspace_id', 'collection']);
            $table->index(['user_id', 'created_at']);
        });

 --------------------------------------------------------------------------------------------------------

        // Checklist System
        Schema::create('checklists', function (Blueprint $table) {
            $table->id();
            $table->foreignId('task_id')->constrained()->cascadeOnDelete();
            $table->string('name');
            $table->integer('order')->default(0);
            $table->timestamps();
            
            $table->index(['task_id', 'order']);
        });

        Schema::create('checklist_items', function (Blueprint $table) {
            $table->id();
            $table->foreignId('checklist_id')->constrained()->cascadeOnDelete();
            $table->foreignId('assignee_id')->nullable()->constrained('users')->nullOnDelete();
            $table->string('name');
            $table->boolean('is_completed')->default(false);
            $table->integer('order')->default(0);
            $table->datetime('due_date')->nullable();
            $table->timestamps();
            
            $table->index(['checklist_id', 'order']);
            $table->index(['checklist_id', 'is_completed']);
        });
 --------------------------------------------------------------------------------------------------------

        // Goal Management
        Schema::create('goals', function (Blueprint $table) {
            $table->id();
            $table->foreignId('workspace_id')->constrained()->cascadeOnDelete();
            $table->foreignId('team_id')->nullable()->constrained()->nullOnDelete();
            $table->foreignId('owner_id')->constrained('users')->cascadeOnDelete();
            $table->string('name');
            $table->text('description')->nullable();
            $table->enum('status', ['draft', 'active', 'completed', 'cancelled'])->default('draft');
            $table->date('start_date')->nullable();
            $table->date('end_date')->nullable();
            $table->integer('progress')->default(0);
            $table->json('metadata')->nullable();
            $table->timestamps();
            
            $table->index(['workspace_id', 'status']);
            $table->index(['team_id', 'status']);
            $table->index(['owner_id', 'status']);
        });

        Schema::create('goal_tasks', function (Blueprint $table) {
            $table->id();
            $table->foreignId('goal_id')->constrained()->cascadeOnDelete();
            $table->foreignId('task_id')->constrained()->cascadeOnDelete();
            $table->timestamps();
            
            $table->unique(['goal_id', 'task_id']);
        });
 --------------------------------------------------------------------------------------------------------


        // Time Tracking
        Schema::create('time_logs', function (Blueprint $table) {
            $table->id();
            $table->foreignId('user_id')->constrained()->cascadeOnDelete();
            $table->foreignId('task_id')->constrained()->cascadeOnDelete();
            $table->datetime('started_at');
            $table->datetime('ended_at')->nullable();
            $table->integer('duration')->nullable(); // in minutes
            $table->text('description')->nullable();
            $table->boolean('is_billable')->default(false);
            $table->decimal('hourly_rate', 8, 2)->nullable();
            $table->timestamps();
            
            $table->index(['user_id', 'started_at']);
            $table->index(['task_id', 'started_at']);
            $table->index(['started_at', 'ended_at']);
        });

        // Recurring Tasks
        Schema::create('recurring_tasks', function (Blueprint $table) {
            $table->id();
            $table->foreignId('task_id')->constrained()->cascadeOnDelete();
            $table->enum('frequency', ['daily', 'weekly', 'monthly', 'yearly'])->default('weekly');
            $table->integer('interval')->default(1);
            $table->json('days_of_week')->nullable(); // For weekly: [1,2,3,4,5]
            $table->integer('day_of_month')->nullable(); // For monthly: 15
            $table->datetime('next_due_date');
            $table->datetime('end_date')->nullable();
            $table->boolean('is_active')->default(true);
            $table->timestamps();
            
            $table->index(['next_due_date', 'is_active']);
        });
        --------------------------------------------------------------------------------------------------------

        // Reminders
        Schema::create('reminders', function (Blueprint $table) {
            $table->id();
            $table->foreignId('user_id')->constrained()->cascadeOnDelete();
            $table->morphs('remindable');
            $table->datetime('remind_at');
            $table->enum('type', ['email', 'in_app', 'sms'])->default('in_app');
            $table->boolean('is_sent')->default(false);
            $table->timestamps();
            
            $table->index(['user_id', 'remind_at']);
            $table->index(['remindable_type', 'remindable_id']);
            $table->index(['remind_at', 'is_sent']);
        });

        // Notifications System
        Schema::create('notifications', function (Blueprint $table) {
            $table->id();
            $table->foreignId('user_id')->constrained()->cascadeOnDelete();
            $table->string('type');
            $table->text('title');
            $table->text('message');
            $table->json('data')->nullable();
            $table->morphs('notifiable');
            $table->boolean('is_read')->default(false);
            $table->datetime('read_at')->nullable();
            $table->timestamps();
            
            $table->index(['user_id', 'is_read']);
            $table->index(['notifiable_type', 'notifiable_id']);
            $table->index(['type', 'created_at']);
        });

        // Activity Logging
        Schema::create('activity_logs', function (Blueprint $table) {
            $table->id();
            $table->foreignId('user_id')->nullable()->constrained()->nullOnDelete();
            $table->foreignId('workspace_id')->constrained()->cascadeOnDelete();
            $table->string('action');
            $table->string('description');
            $table->morphs('subject');
            $table->json('properties')->nullable();
            $table->string('ip_address')->nullable();
            $table->string('user_agent')->nullable();
            $table->timestamps();
            
            $table->index(['user_id', 'created_at']);
            $table->index(['workspace_id', 'created_at']);
            $table->index(['subject_type', 'subject_id']);
            $table->index(['action', 'created_at']);
        });

        Schema::create('audit_logs', function (Blueprint $table) {
            $table->id();
            $table->foreignId('user_id')->nullable()->constrained()->nullOnDelete();
            $table->string('event');
            $table->morphs('auditable');
            $table->json('old_values')->nullable();
            $table->json('new_values')->nullable();
            $table->string('ip_address')->nullable();
            $table->string('user_agent')->nullable();
            $table->timestamps();
            
            $table->index(['auditable_type', 'auditable_id']);
            $table->index(['user_id', 'created_at']);
            $table->index(['event', 'created_at']);
        });

        // Reactions
        Schema::create('reactions', function (Blueprint $table) {
            $table->id();
            $table->foreignId('user_id')->constrained()->cascadeOnDelete();
            $table->morphs('reactable');
            $table->string('type'); // emoji type like 'thumbs_up', 'heart', etc.
            $table->timestamps();
            
            $table->unique(['user_id', 'reactable_type', 'reactable_id', 'type']);
            $table->index(['reactable_type', 'reactable_id']);
        });

        // Custom Fields System
        Schema::create('custom_fields', function (Blueprint $table) {
            $table->id();
            $table->foreignId('workspace_id')->constrained()->cascadeOnDelete();
            $table->string('name');
            $table->string('key');
            $table->enum('type', ['text', 'number', 'date', 'select', 'multiselect', 'checkbox', 'textarea', 'url', 'email']);
            $table->string('applies_to'); // tasks, projects, users, etc.
            $table->json('options')->nullable(); // For select/multiselect
            $table->boolean('is_required')->default(false);
            $table->integer('order')->default(0);
            $table->timestamps();
            
            $table->unique(['workspace_id', 'applies_to', 'key']);
            $table->index(['workspace_id', 'applies_to']);
        });

        Schema::create('custom_field_values', function (Blueprint $table) {
            $table->id();
            $table->foreignId('custom_field_id')->constrained()->cascadeOnDelete();
            $table->morphs('entity');
            $table->text('value')->nullable();
            $table->timestamps();
            
            $table->unique(['custom_field_id', 'entity_type', 'entity_id']);
            $table->index(['entity_type', 'entity_id']);
        });

        // Forms System
        Schema::create('forms', function (Blueprint $table) {
            $table->id();
            $table->foreignId('workspace_id')->constrained()->cascadeOnDelete();
            $table->foreignId('created_by_id')->constrained('users')->cascadeOnDelete();
            $table->string('name');
            $table->string('slug');
            $table->text('description')->nullable();
            $table->json('fields');
            $table->json('settings')->nullable();
            $table->boolean('is_active')->default(true);
            $table->timestamps();
            
            $table->unique(['workspace_id', 'slug']);
            $table->index(['workspace_id', 'is_active']);
        });

        Schema::create('form_responses', function (Blueprint $table) {
            $table->id();
            $table->foreignId('form_id')->constrained()->cascadeOnDelete();
            $table->foreignId('user_id')->nullable()->constrained()->nullOnDelete();
            $table->json('data');
            $table->string('ip_address')->nullable();
            $table->string('user_agent')->nullable();
            $table->timestamps();
            
            $table->index(['form_id', 'created_at']);
            $table->index(['user_id', 'created_at']);
        });

        // Wiki/Knowledge Base
        Schema::create('wikis', function (Blueprint $table) {
            $table->id();
            $table->foreignId('workspace_id')->constrained()->cascadeOnDelete();
            $table->foreignId('created_by_id')->constrained('users')->cascadeOnDelete();
            $table->foreignId('parent_id')->nullable()->constrained('wikis')->nullOnDelete();
            $table->string('title');
            $table->string('slug');
            $table->longText('content');
            $table->boolean('is_published')->default(false);
            $table->json('metadata')->nullable();
            $table->timestamps();
            
            $table->unique(['workspace_id', 'slug']);
            $table->index(['workspace_id', 'is_published']);
            $table->index(['parent_id', 'title']);
        });

        Schema::create('wiki_revisions', function (Blueprint $table) {
            $table->id();
            $table->foreignId('wiki_id')->constrained()->cascadeOnDelete();
            $table->foreignId('user_id')->constrained()->cascadeOnDelete();
            $table->string('title');
            $table->longText('content');
            $table->text('summary')->nullable();
            $table->timestamps();
            
            $table->index(['wiki_id', 'created_at']);
            $table->index(['user_id', 'created_at']);
        });

        // Calendar Events
        Schema::create('events', function (Blueprint $table) {
            $table->id();
            $table->foreignId('workspace_id')->constrained()->cascadeOnDelete();
            $table->foreignId('created_by_id')->constrained('users')->cascadeOnDelete();
            $table->string('title');
            $table->text('description')->nullable();
            $table->datetime('start_date');
            $table->datetime('end_date');
            $table->boolean('all_day')->default(false);
            $table->string('location')->nullable();
            $table->enum('type', ['meeting', 'deadline', 'reminder', 'other'])->default('meeting');
            $table->json('metadata')->nullable();
            $table->timestamps();
            
            $table->index(['workspace_id', 'start_date']);
            $table->index(['created_by_id', 'start_date']);
        });

        Schema::create('event_participants', function (Blueprint $table) {
            $table->id();
            $table->foreignId('event_id')->constrained()->cascadeOnDelete();
            $table->foreignId('user_id')->constrained()->cascadeOnDelete();
            $table->enum('status', ['pending', 'accepted', 'declined', 'tentative'])->default('pending');
            $table->timestamps();
            
            $table->unique(['event_id', 'user_id']);
            $table->index(['user_id', 'status']);
        });

        // User Preferences
        Schema::create('user_preferences', function (Blueprint $table) {
            $table->id();
            $table->foreignId('user_id')->constrained()->cascadeOnDelete();
            $table->string('key');
            $table->text('value');
            $table->timestamps();
            
            $table->unique(['user_id', 'key']);
        });

        // API Integration
        Schema::create('api_tokens', function (Blueprint $table) {
            $table->id();
            $table->foreignId('user_id')->constrained()->cascadeOnDelete();
            $table->string('name');
            $table->string('token', 80)->unique();
            $table->text('abilities')->nullable();
            $table->timestamp('last_used_at')->nullable();
            $table->timestamp('expires_at')->nullable();
            $table->timestamps();
            
            $table->index(['user_id', 'expires_at']);
        });

        Schema::create('integrations', function (Blueprint $table) {
            $table->id();
            $table->foreignId('workspace_id')->constrained()->cascadeOnDelete();
            $table->string('name');
            $table->string('type'); // slack, github, gitlab, etc.
            $table->json('configuration');
            $table->boolean('is_active')->default(true);
            $table->timestamps();
            
            $table->index(['workspace_id', 'type']);
        });

        // SaaS Features
        Schema::create('plans', function (Blueprint $table) {
            $table->id();
            $table->string('name');
            $table->string('slug')->unique();
            $table->text('description')->nullable();
            $table->decimal('price', 8, 2);
            $table->enum('billing_cycle', ['monthly', 'yearly'])->default('monthly');
            $table->integer('max_users')->nullable();
            $table->integer('max_projects')->nullable();
            $table->integer('max_storage_gb')->nullable();
            $table->json('features')->nullable();
            $table->boolean('is_active')->default(true);
            $table->boolean('is_popular')->default(false);
            $table->timestamps();
            
            $table->index(['is_active', 'price']);
        });

        Schema::create('subscriptions', function (Blueprint $table) {
            $table->id();
            $table->foreignId('workspace_id')->constrained()->cascadeOnDelete();
            $table->foreignId('plan_id')->constrained()->cascadeOnDelete();
            $table->string('stripe_id')->nullable();
            $table->string('stripe_status')->nullable();
            $table->string('stripe_price')->nullable();
            $table->integer('quantity')->default(1);
            $table->timestamp('trial_ends_at')->nullable();
            $table->timestamp('ends_at')->nullable();
            $table->timestamps();
            
            $table->index(['workspace_id', 'stripe_status']);
        });

        Schema::create('invoices', function (Blueprint $table) {
            $table->id();
            $table->foreignId('workspace_id')->constrained()->cascadeOnDelete();
            $table->string('stripe_id')->unique();
            $table->string('number');
            $table->decimal('amount', 10, 2);
            $table->string('currency', 3);
            $table->enum('status', ['draft', 'open', 'paid', 'uncollectible', 'void'])->default('draft');
            $table->timestamp('due_date')->nullable();
            $table->json('line_items')->nullable();
            $table->timestamps();
            
            $table->index(['workspace_id', 'status']);
        });

        // Invitation System
        Schema::create('invitations', function (Blueprint $table) {
            $table->id();
            $table->foreignId('workspace_id')->constrained()->cascadeOnDelete();
            $table->foreignId('team_id')->nullable()->constrained()->nullOnDelete();
            $table->foreignId('invited_by_id')->constrained('users')->cascadeOnDelete();
            $table->string('email');
            $table->string('token')->unique();
            $table->enum('role', ['owner', 'admin', 'member', 'viewer'])->default('member');
            $table->enum('status', ['pending', 'accepted', 'declined', 'expired'])->default('pending');
            $table->json('metadata')->nullable();
            $table->timestamp('expires_at');
            $table->timestamps();
            
            $table->index(['workspace_id', 'status']);
            $table->index(['email', 'status']);
            $table->index(['token', 'expires_at']);
        });

        // Email Templates
        Schema::create('email_templates', function (Blueprint $table) {
            $table->id();
            $table->foreignId('workspace_id')->nullable()->constrained()->nullOnDelete();
            $table->string('name');
            $table->string('slug');
            $table->string('subject');
            $table->longText('content');
            $table->enum('type', ['system', 'custom'])->default('custom');
            $table->boolean('is_active')->default(true);
            $table->timestamps();
            
            $table->unique(['workspace_id', 'slug']);
            $table->index(['type', 'is_active']);
        });

        // Reports and Analytics
        Schema::create('reports', function (Blueprint $table) {
            $table->id();
            $table->foreignId('workspace_id')->constrained()->cascadeOnDelete();
            $table->foreignId('created_by_id')->constrained('users')->cascadeOnDelete();
            $table->string('name');
            $table->string('type'); // time_tracking, task_completion, project_progress, etc.
            $table->json('filters');
            $table->json('settings')->nullable();
            $table->boolean('is_scheduled')->default(false);
            $table->string('schedule_frequency')->nullable();
            $table->timestamp('last_generated_at')->nullable();
            $table->timestamps();
            
            $table->index(['workspace_id', 'type']);
            $table->index(['created_by_id', 'type']);
        });

        // Webhooks
        Schema::create('webhooks', function (Blueprint $table) {
            $table->id();
            $table->foreignId('workspace_id')->constrained()->cascadeOnDelete();
            $table->string('name');
            $table->string('url');
            $table->json('events'); // ['task.created', 'task.updated', etc.]
            $table->string('secret')->nullable();
            $table->boolean('is_active')->default(true);
            $table->integer('retry_count')->default(3);
            $table->timestamps();
            
            $table->index(['workspace_id', 'is_active']);
        });

        Schema::create('webhook_deliveries', function (Blueprint $table) {
            $table->id();
            $table->foreignId('webhook_id')->constrained()->cascadeOnDelete();
            $table->string('event');
            $table->json('payload');
            $table->integer('response_code')->nullable();
            $table->text('response_body')->nullable();
            $table->enum('status', ['pending', 'delivered', 'failed'])->default('pending');
            $table->integer('attempts')->default(0);
            $table->timestamp('next_attempt_at')->nullable();
            $table->timestamps();
            
            $table->index(['webhook_id', 'status']);
            $table->index(['event', 'created_at']);
        });

        // System Settings
        Schema::create('settings', function (Blueprint $table) {
            $table->id();
            $table->foreignId('workspace_id')->nullable()->constrained()->nullOnDelete();
            $table->string('key');
            $table->text('value');
            $table->string('type')->default('string'); // string, integer, boolean, json
            $table->timestamps();
            
            $table->unique(['workspace_id', 'key']);
        });

        // Password Reset Tokens
        Schema::create('password_reset_tokens', function (Blueprint $table) {
            $table->string('email')->primary();
            $table->string('token');
            $table->timestamp('created_at')->nullable();
        });

        // Failed Jobs
        Schema::create('failed_jobs', function (Blueprint $table) {
            $table->id();
            $table->string('uuid')->unique();
            $table->text('connection');
            $table->text('queue');
            $table->longText('payload');
            $table->longText('exception');
            $table->timestamp('failed_at')->useCurrent();
        });

        // Personal Access Tokens
        Schema::create('personal_access_tokens', function (Blueprint $table) {
            $table->id();
            $table->morphs('tokenable');
            $table->string('name');
            $table->string('token', 64)->unique();
            $table->text('abilities')->nullable();
            $table->timestamp('last_used_at')->nullable();
            $table->timestamp('expires_at')->nullable();
            $table->timestamps();
            
            $table->index(['tokenable_type', 'tokenable_id']);
        });

        // Jobs table for queues
        Schema::create('jobs', function (Blueprint $table) {
            $table->bigIncrements('id');
            $table->string('queue')->index();
            $table->longText('payload');
            $table->unsignedTinyInteger('attempts');
            $table->unsignedInteger('reserved_at')->nullable();
            $table->unsignedInteger('available_at');
            $table->unsignedInteger('created_at');
            
            $table->index(['queue', 'reserved_at']);
        });

        // Cache table
        Schema::create('cache', function (Blueprint $table) {
            $table->string('key')->primary();
            $table->mediumText('value');
            $table->integer('expiration');
        });

        Schema::create('cache_locks', function (Blueprint $table) {
            $table->string('key')->primary();
            $table->string('owner');
            $table->integer('expiration');
        });

        // Sessions
        Schema::create('sessions', function (Blueprint $table) {
            $table->string('id')->primary();
            $table->foreignId('user_id')->nullable()->index();
            $table->string('ip_address', 45)->nullable();
            $table->text('user_agent')->nullable();
            $table->longText('payload');
            $table->integer('last_activity')->index();
        });

        // Backup and Archive Tables
        Schema::create('backups', function (Blueprint $table) {
            $table->id();
            $table->foreignId('workspace_id')->constrained()->cascadeOnDelete();
            $table->string('name');
            $table->string('type'); // full, incremental, tables
            $table->string('path');
            $table->string('disk')->default('s3');
            $table->bigInteger('size');
            $table->enum('status', ['pending', 'in_progress', 'completed', 'failed'])->default('pending');
            $table->timestamp('started_at')->nullable();
            $table->timestamp('completed_at')->nullable();
            $table->text('error_message')->nullable();
            $table->timestamps();
            
            $table->index(['workspace_id', 'status']);
            $table->index(['type', 'completed_at']);
        });

        // Import/Export
        Schema::create('imports', function (Blueprint $table) {
            $table->id();
            $table->foreignId('workspace_id')->constrained()->cascadeOnDelete();
            $table->foreignId('user_id')->constrained()->cascadeOnDelete();
            $table->string('type'); // csv, json, excel
            $table->string('entity'); // tasks, projects, users
            $table->string('file_path');
            $table->integer('total_rows')->default(0);
            $table->integer('processed_rows')->default(0);
            $table->integer('successful_rows')->default(0);
            $table->integer('failed_rows')->default(0);
            $table->enum('status', ['pending', 'processing', 'completed', 'failed'])->default('pending');
            $table->json('errors')->nullable();
            $table->timestamps();
            
            $table->index(['workspace_id', 'status']);
            $table->index(['user_id', 'created_at']);
        });

        Schema::create('exports', function (Blueprint $table) {
            $table->id();
            $table->foreignId('workspace_id')->constrained()->cascadeOnDelete();
            $table->foreignId('user_id')->constrained()->cascadeOnDelete();
            $table->string('type'); // csv, json, excel, pdf
            $table->string('entity'); // tasks, projects, users
            $table->json('filters')->nullable();
            $table->string('file_path')->nullable();
            $table->enum('status', ['pending', 'processing', 'completed', 'failed'])->default('pending');
            $table->timestamp('expires_at')->nullable();
            $table->timestamps();
            
            $table->index(['workspace_id', 'status']);
            $table->index(['user_id', 'created_at']);
        });

        // Additional indexes for performance optimization
        DB::statement('CREATE INDEX idx_tasks_compound ON tasks (workspace_id, project_id, status_id, assignee_id)');
        DB::statement('CREATE INDEX idx_activity_logs_compound ON activity_logs (workspace_id, user_id, action, created_at)');
        DB::statement('CREATE INDEX idx_notifications_compound ON notifications (user_id, type, is_read, created_at)');
        DB::statement('CREATE INDEX idx_comments_compound ON comments (commentable_type, commentable_id, created_at)');
        DB::statement('CREATE INDEX idx_attachments_compound ON attachments (attachable_type, attachable_id, created_at)');

        // Full-text search indexes (if using MySQL)
        if (config('database.default') === 'mysql') {
            DB::statement('ALTER TABLE tasks ADD FULLTEXT(title, description)');
            DB::statement('ALTER TABLE projects ADD FULLTEXT(name, description)');
            DB::statement('ALTER TABLE comments ADD FULLTEXT(content)');
            DB::statement('ALTER TABLE wikis ADD FULLTEXT(title, content)');
        }
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        // Drop tables in reverse order to avoid foreign key constraint issues
        Schema::dropIfExists('exports');
        Schema::dropIfExists('imports');
        Schema::dropIfExists('backups');
        Schema::dropIfExists('sessions');
        Schema::dropIfExists('cache_locks');
        Schema::dropIfExists('cache');
        Schema::dropIfExists('jobs');
        Schema::dropIfExists('personal_access_tokens');
        Schema::dropIfExists('failed_jobs');
        Schema::dropIfExists('password_reset_tokens');
        Schema::dropIfExists('settings');
        Schema::dropIfExists('webhook_deliveries');
        Schema::dropIfExists('webhooks');
        Schema::dropIfExists('reports');
        Schema::dropIfExists('email_templates');
        Schema::dropIfExists('invitations');
        Schema::dropIfExists('invoices');
        Schema::dropIfExists('subscriptions');
        Schema::dropIfExists('plans');
        Schema::dropIfExists('integrations');
        Schema::dropIfExists('api_tokens');
        Schema::dropIfExists('user_preferences');
        Schema::dropIfExists('event_participants');
        Schema::dropIfExists('events');
        Schema::dropIfExists('wiki_revisions');
        Schema::dropIfExists('wikis');
        Schema::dropIfExists('form_responses');
        Schema::dropIfExists('forms');
        Schema::dropIfExists('custom_field_values');
        Schema::dropIfExists('custom_fields');
        Schema::dropIfExists('reactions');
        Schema::dropIfExists('audit_logs');
        Schema::dropIfExists('activity_logs');
        Schema::dropIfExists('notifications');
        Schema::dropIfExists('reminders');
        Schema::dropIfExists('recurring_tasks');
        Schema::dropIfExists('time_logs');
        Schema::dropIfExists('goal_tasks');
        Schema::dropIfExists('goals');
        Schema::dropIfExists('checklist_items');
        Schema::dropIfExists('checklists');
        Schema::dropIfExists('media');
        Schema::dropIfExists('attachments');
        Schema::dropIfExists('mentions');
        Schema::dropIfExists('messages');
        Schema::dropIfExists('conversation_user');
        Schema::dropIfExists('conversations');
        Schema::dropIfExists('comments');
        Schema::dropIfExists('task_tag');
        Schema::dropIfExists('tags');
        Schema::dropIfExists('task_milestone');
        Schema::dropIfExists('milestones');
        Schema::dropIfExists('task_dependencies');
        Schema::dropIfExists('subtasks');
        Schema::dropIfExists('task_pipeline');
        Schema::dropIfExists('tasks');
        Schema::dropIfExists('pipeline_status');
        Schema::dropIfExists('pipelines');
        Schema::dropIfExists('statuses');
        Schema::dropIfExists('project_user');
        Schema::dropIfExists('projects');
        Schema::dropIfExists('workspace_user');
        Schema::dropIfExists('team_user');
        Schema::dropIfExists('teams');
        Schema::dropIfExists('workspaces');
        Schema::dropIfExists('users');
    }
};
```

This comprehensive Laravel migration file includes:

## 🚀 **Core Features**
- **Multi-tenancy** via workspaces and teams
- **Complete project management** with tasks, subtasks, milestones
- **Advanced task management** with dependencies, pipelines, and statuses
- **Time tracking** and recurring tasks
- **File management** with attachments and media library
- **Communication** via comments, conversations, and mentions

## 🔧 **Advanced Features**
- **Custom fields** system for flexibility
- **Forms** for data collection
- **Wiki/Knowledge base** with revisions
- **Goal management** and tracking
- **Checklist** system
- **Calendar events** and scheduling
- **Notifications** and reminders
- **Activity logging** and audit trails
- **Reactions** and social features

## 🏢 **SaaS-Ready Features**
- **Subscription management** with plans and invoices
- **API tokens** for integrations
- **Webhooks** for external services
- **Import/Export** functionality
- **Backup** system
- **Email templates**
- **User preferences**
- **Invitation** system

## 📊 **Performance Optimizations**
- **Strategic indexing** for fast queries
- **Compound indexes** for complex queries
- **Full-text search** support (MySQL)
- **Proper foreign key constraints**
- **Cascading deletes** for data integrity

## 🌍 **African Context Considerations**
- **Offline-first** design considerations
- **Multi-language** support via locale fields
- **Flexible pricing** via subscription tiers
- **Resource optimization** for varying internet speeds
- **Scalable architecture** for growing user bases

The migration is production-ready and includes all necessary constraints, indexes, and relationships for a robust project management system suitable for African university students and innovators.